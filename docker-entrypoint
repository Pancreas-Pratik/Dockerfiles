#!/bin/bash

source ~/.bashrc

# Make bashline configurations.
set -e
RESET='\033[0m'
COLOR='\033[1;32m'

function msg {
  echo -e "${COLOR}$(date): $1${RESET}"
}

function fail {
  msg "Error : $?"
  exit 1
}

function mcd {
  mkdir -p "$1" || fail
  cd "$1" || fail
}

function nvm_install_dir {
    if [ -n "$NVM_DIR" ]; then
        printf %s "${NVM_DIR}"
    else
        [ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm"
    fi
}
sudo_nvm_install_dir=$(declare -f nvm_install_dir)

function run_with_nodejs {
    # Switch to root mode for getting the environment value.
    RUN_NVM_DIR="$(sudo NVM_DIR=$NVM_DIR bash -c "$sudo_nvm_install_dir; nvm_install_dir")" || fail
    # Still use the user mode for running the app.
    if [ -s "$RUN_NVM_DIR/nvm.sh" ] && [ -s "$RUN_NVM_DIR/bash_completion" ]
    then
        bash -c ". $RUN_NVM_DIR/nvm.sh \
        && . $RUN_NVM_DIR/bash_completion \
        && nvm use default \
        && $1" || fail
    else
        bash -c "$1" || fail
    fi
}

MODE="vnc"
MODE_RUN_SCRIPT=""
JLAB_PASSWORD=""
JLAB_ROOT_DIR="/homelocal"
USER_ROOT="/home/xubuntu"
# Pass options from command line
for ARGUMENT in "$@"
do
    KEY=$(echo $ARGUMENT | cut -f1 -d=)
    if [[ $KEY != '--*' ]]
    then
        VALUE=$(echo $ARGUMENT | cut -f2 -d=)   
    fi
    case "$KEY" in
            --bash)         MODE="bash" ;;
            --vnc)          MODE="vnc" ;;
            --root)         MODE="rootvnc" ;;
            --xvnc)         MODE="xvnc" ;;
            --jlab)         MODE="jupyter" ;;
            script)         MODE_RUN_SCRIPT=${VALUE} ;;
            jlab_password)  JLAB_PASSWORD=${VALUE} ;;
            jlab_rootdir)   JLAB_ROOT_DIR=${VALUE} ;;
            *)   
    esac    
done

MACHINE_IP=$(hostname -I | awk 'NR==1 {print $1}')
echo "Check script: ${LAUNCH_SCRIPT_ORIGINAL}"
if [ "x${LAUNCH_SCRIPT_ORIGINAL}" != "x" ]
then
    echo "Launch script: ${LAUNCH_SCRIPT_ORIGINAL}"
    bash $LAUNCH_SCRIPT_ORIGINAL echo "Finish launching."
fi

if [ "x${MODE}" = "xbash" ]
then
    exec bash
    exit 0
fi

if [ "x${MODE_RUN_SCRIPT}" != "x" ]
then
    echo "${MODE_RUN_SCRIPT}" | bash
    exit 0
fi

if [ "x${MODE}" = "xjupyter" ]
then
    echo "-----------------------------------"
    echo " XUbuntu Desktop Container"
    echo " Yuchen Jin"
    echo " Only jupyterlab mode"
    echo "-----------------------------------"
    echo "This is a container used for launching jupyterlab."
    echo "Use the following options to configure the lab:"
    echo "    --jlab: use this flag to open the jupyter lab."
    echo "    password: set the password of the lab manually."
    echo "    rootdir: set the root directory of the lab."
    echo "If not setting the password manually, users need to check the token shown in the terminal."
    echo ""
    
    OPTION_JLAB_PASSWORD=""
    if [ "x${JLAB_PASSWORD}" != "x" ]
    then
        OPTION_JLAB_PASSWORD="--NotebookApp.token=${JLAB_PASSWORD}"
    fi

    OPTION_JLAB_ROOT=""
    if [ "x${JLAB_ROOT_DIR}" != "x" ]
    then
        OPTION_JLAB_ROOT="--notebook-dir=${JLAB_ROOT_DIR}"
    fi

    run_with_nodejs "jupyter lab --ip=${MACHINE_IP} --port=6080 --no-browser ${OPTION_JLAB_PASSWORD} --allow-root ${OPTION_JLAB_ROOT} --NotebookApp.custom_display_url=http://${MACHINE_IP}:6080/"
    
    exec bash
    exit 0
fi

echo "----------------------------------------"
echo " XUbuntu Desktop Container"
echo " Yuchen Jin"
echo "----------------------------------------"
echo " Pre-request script:"
echo "   ${LAUNCH_SCRIPT_ORIGINAL} "
echo "----------------------------------------"
echo "This is a ubuntu desktop based on VNC server, to understand how to use it, follow these steps:"
echo "    S1: Input the password as the instruction."
echo "    S2: Confirm the password and remember the port used by this VNC session."
echo "        This setting is only required when you first enter the container. If you want to change the password, use \"tigervncpasswd\" to do that."
echo "    S3: Check the host IP address returned from the screen."
echo "    S4: Run \"noVNC\" outside the container by \"$ noVNC IP=... PORT=...\" where \"PORT\" is optional."
echo "    S5: Check the URL returned by noVNC, and use a web browser to connect the desktop URL."
echo "    S6: Input the password which is set in S1."
echo "    S7: Now you would see the desktop has been launched"
echo "    S8: Enjoy your remote desktop. Note that you should not close both the terminal running the container and the default terminal of noVNC screen."
echo "    S9: Use \"xrandr -s 1920x1080\" to choose the resolution as you want."
echo "    S10: Before quit from the docker, remember to kill the vnc server."
echo ""

echo "---------"
echo "Host IP:"
echo $MACHINE_IP
echo "---------"

echo "VNC settings:"

if [ "x${MODE}" = "xrootvnc" ]
then
    FILE_VNCPASSWD=/root/.vnc/passwd
    if [[ -f "${FILE_VNCPASSWD}" ]]; then
        echo "Find VNC password."
    else
        sudo tigervncpasswd ${FILE_VNCPASSWD}
    fi
else
    FILE_VNCPASSWD=${USER_ROOT}/.vnc/passwd
    if [[ -f "${FILE_VNCPASSWD}" ]]; then
        echo "Find VNC password."
    else
        tigervncpasswd ${FILE_VNCPASSWD}
        sudo cp -f ${FILE_VNCPASSWD} /root/.vnc/ || fail
    fi
fi

if [ "x${MODE}" = "xrootvnc" ]
then
    sudo tigervncserver -name xubuntu -depth 24 -geometry 1920x1080
fi

if [ "x${MODE}" = "xxvnc" ]
then
    Xtigervnc :0 -depth 24 -geometry 1920x1080 -br &
    sleep 3
    x0tigervncserver -display=:0 -Geometry=1920x1080+0+0 -rfbport=5901 -PasswordFile=${FILE_VNCPASSWD} &
fi

if [ "x${MODE}" = "xvnc" ]
then
    tigervncserver -name xubuntu -depth 24 -geometry 1920x1080
fi

exec noVNC --vnc $MACHINE_IP:5901 --listen 6080 &

exec '/bin/bash'
