#!/bin/bash

# Make bashline configurations.
set -e
RESET='\033[0m'
COLOR='\033[1;32m'

function msg {
  echo -e "${COLOR}$(date): $1${RESET}"
}

function fail {
  msg "Error : $?"
  exit 1
}

function mcd {
  mkdir -p "$1" || fail
  cd "$1" || fail
}

# The script for installing newest opencv3

msg "Check the packages and upgrade them."
apt-get -y update || fail && apt-get -y upgrade || fail && apt-get -y dist-upgrade || fail && apt-get -y autoremove || fail && apt-get -y autoclean || fail

msg "Installing build tools."
apt-get install -y                                                            \
  build-essential                                                             \
  cmake ccache                                                                \
  checkinstall cmake pkg-config git                                           \
|| fail

msg "Installing GUI components."
apt-get install -y                                                            \
  libharfbuzz-dev                                                             \
  libvtk6-dev                                                                 \
  python-vtk6                                                                 \
  qt5-default                                                                 \
  libgtk2.0-dev libgtk-3-dev                                                  \
|| fail

msg "Installing media I/O componenets."
apt-get install -y                                                            \
  libgdal-dev                                                                 \
  libgphoto2-dev                                                              \
  libjasper-dev                                                               \
  libjpeg-dev                                                                 \
  libopenexr-dev                                                              \
  libpng-dev                                                                  \
  libtiff5-dev                                                                \
  libwebp-dev                                                                 \
  zlib1g-dev                                                                  \
|| fail

msg "Installing video I/O components."
apt-get install -y                                                            \
  libdc1394-22-dev                                                            \
  libopencore-amrnb-dev                                                       \
  libopencore-amrwb-dev                                                       \
  libtheora-dev                                                               \
  libv4l-dev                                                                  \
  libogre-1.9-dev                                                             \
  libvorbis-dev                                                               \
  libxine2                                                                    \
  libxine2-dev                                                                \
  libxvidcore-dev                                                             \
|| fail
if [ ! -f /usr/include/linux/videodev.h ]; then
    ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h || fail
fi

msg "Installing Streaming Components."
apt-get install -y                                                            \
  gstreamer1.0-doc                                                            \
  gstreamer1.0-libav                                                          \
  gstreamer1.0-plugins-bad                                                    \
  gstreamer1.0-plugins-base                                                   \
  gstreamer1.0-plugins-good                                                   \
  gstreamer1.0-plugins-ugly                                                   \
  gstreamer1.0-tools                                                          \
  libgstreamer1.0-0                                                           \
  libgstreamer1.0-dev                                                         \
  libgstreamer-plugins-bad1.0-dev                                             \
  libgstreamer-plugins-base1.0-dev                                            \
  libgstreamer-plugins-good1.0-dev                                            \
|| fail

msg "Installing Linear Algebra and Parallelism libs."
apt-get install -y                                                            \
  libboost-all-dev                                                            \
  libfftw3-dev                                                                \
  libfftw3-mpi-dev                                                            \
  libmpfr-dev                                                                 \
  libopenblas-dev                                                             \
  libsuperlu-dev                                                              \
  libtbb-dev                                                                  \
|| fail

msg "Installing LAPACKE libs."
apt-get install -y                                                            \
  checkinstall                                                                \
  liblapacke-dev                                                              \
|| fail

msg "Installing SFM components."
apt-get install -y                                                            \
  libatlas-base-dev                                                           \
  libgflags-dev                                                               \
  libgoogle-glog-dev                                                          \
  libsuitesparse-dev                                                          \
  libhdf5-dev                                                                 \
  libprotobuf-dev protobuf-compiler                                           \
  libeigen3-dev                                                               \
|| fail

msg "Installing Python."
apt-get install -y                                                            \
  pylint                                                                      \
  python-dev                                                                  \
  python-numpy                                                                \
  python-tk                                                                   \
  python3-dev                                                                 \
  python3-numpy                                                               \
  python3-tk                                                                  \
  python-pip                                                                  \
  python3-pip                                                                 \
|| fail
apt-get -y install --reinstall python-pkg-resources || fail
pip2 install -U numpy==1.14.5 && \
pip3 install -U numpy==1.14.5 && \
pip2 install --upgrade setuptools && \
pip3 install --upgrade setuptools && \
pip2 install wheel && pip3 install wheel && \
pip3 install numpy==1.14.5 scipy matplotlib scikit-image scikit-learn ipython && \
pip2 install numpy==1.14.5 matplotlib scipy scikit-image scikit-learn

msg "Installing JDK."
apt-get install -y                                                            \
  ant                                                                         \
  default-jdk                                                                 \
|| fail

msg "Installing Docs."
apt-get install -y doxygen || fail

# Create the compile folder
SOURCE_ROOT_PATH="/apps/source"
BUILD_PATH="/apps/build/"
INSTALL_PATH="/usr/local"
CUDA_PATH="/usr/local/cuda"
mkdir -p $SOURCE_ROOT_PATH $BUILD_PATH

# Get opencv3 and its dependencies' repositories
cd $SOURCE_ROOT_PATH
rm ceres-solver -rf  || fail && \
git clone -b 1.14.x https://ceres-solver.googlesource.com/ceres-solver || fail
REPOS="opencv,https://github.com/opencv/opencv.git
  opencv_contrib,https://github.com/opencv/opencv_contrib.git
  opencv_extra,https://github.com/opencv/opencv_extra.git"
for repo in $REPOS; do
  IFS=","
  set $repo
  if [[ -D$1 && -x $1 ]]; then
    msg "Updating $1 Repo."
    cd $1
    git pull || fail
    cd ..
  else
    msg "Downloading $1 Package"
    git clone $2 || fail
  fi
done

CHECKOUT_REPOS="opencv
  opencv_contrib
  opencv_extra"
for ckrepo in $CHECKOUT_REPOS; do
  msg "Checkouting $ckrepo Package"
  cd $SOURCE_ROOT_PATH/$ckrepo && git checkout 3.4.2
done

# Install gcc-5, rolling back to 5.4 and switch to it
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 90 --slave /usr/bin/g++ g++ /usr/bin/g++-5 || fail
#for f in avx512fintrin.h avx512pfintrin.h avx512vlintrin.h; do
#   curl -H "User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36" -o $f "https://gcc.gnu.org/viewcvs/gcc/branches/gcc-5-branch/gcc/config/i386/${f}?view=co&revision=245536&content-type=text%2Fplain&pathrev=245536"
#done && mv avx512*intrin.h  /usr/lib/gcc/x86_64-linux-gnu/5/include/

# Install gcc-4.9 and switch to it
#apt-get update -y && apt-get install -y --no-install-recommends gcc-4.9 g++-4.9 || fail
#update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9 || fail

# Compile Ceres Solver
msg "Configuring Ceres Solver."
mcd "$BUILD_PATH/ceres-solver"
cmake \
  -DCMAKE_C_FLAGS="-fPIC"                                                     \
  -DCMAKE_CXX_FLAGS="-fPIC"                                                   \
  -DBUILD_EXAMPLES=OFF                                                        \
  -DBUILD_SHARED_LIBS=ON                                                      \
$SOURCE_ROOT_PATH/ceres-solver || fail
msg "Making Ceres Solver."
make -j32 || fail
# make -j32 test || fail
msg "Installing Ceres Solver."
make -j32 install || fail

msg "Configuring OpenCV3."
mcd "$BUILD_PATH/opencv"
cmake -D BUILD_EXAMPLES=ON                                                     \
      -D BUILD_OPENCV_JAVA=OFF                                                 \
      -D BUILD_OPENCV_JS=ON                                                    \
      -D BUILD_OPENCV_NONFREE=ON                                               \
      -D BUILD_OPENCV_PYTHON=ON                                                \
      -D CMAKE_BUILD_TYPE=RELEASE                                              \
      -D CMAKE_INSTALL_PREFIX=$INSTALL_PATH                                    \
      -D CMAKE_LIBRARY_PATH=$CUDA_PATH/lib64/stubs/                            \
      -D CUDA_CUDA_LIBRARY=$CUDA_PATH/lib64/stubs/libcuda.so                   \
      -D CUDA_FAST_MATH=ON                                                     \
      -D CUDA_TOOLKIT_ROOT_DIR=$CUDA_PATH                                      \
      -D ENABLE_CCACHE=ON                                                      \
      -D ENABLE_FAST_MATH=ON                                                   \
      -D ENABLE_PRECOMPILED_HEADERS=OFF                                        \
      -D ENABLE_CXX11=ON                                                       \
      -D INSTALL_C_EXAMPLES=ON                                                 \
      -D INSTALL_PYTHON_EXAMPLES=ON                                            \
      -D INSTALL_TESTS=ON                                                      \
      -D OPENCV_EXTRA_MODULES_PATH=$SOURCE_ROOT_PATH/opencv_contrib/modules/   \
      -D OPENCV_ENABLE_NONFREE=ON                                              \
      -D OPENCV_TEST_DATA_PATH=$SOURCE_ROOT_PATH/opencv_extra/testdata/        \
      -D WITH_CUBLAS=ON                                                        \
      -D WITH_CUDA=ON                                                          \
      -D WITH_FFMPEG=ON                                                        \
      -D WITH_GDAL=ON                                                          \
      -D WITH_GSTREAMER=ON                                                     \
      -D WITH_LIBV4L=ON                                                        \
      -D WITH_NVCUVID=ON                                                       \
      -D WITH_OPENCL=ON                                                        \
      -D WITH_OPENGL=ON                                                        \
      -D WITH_QT=OFF                                                           \
      -D WITH_GTK=ON                                                           \
      -D WITH_TBB=OFF                                                          \
      -D WITH_OPENMP=ON                                                        \
      -D WITH_V4L=ON                                                           \
      -D WITH_VTK=ON                                                           \
      -D WITH_XINE=ON                                                          \
$SOURCE_ROOT_PATH/opencv || fail
msg "Making OpenCV3."
make -j32 || fail
msg "Installing OpenCV3."
make -j32 install || fail
sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
ldconfig

# Switch back and recover from the rolled back gcc
#update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9 || fail
#apt-get -y install gcc-5 g++-5 --reinstall
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 --slave /usr/bin/g++ g++ /usr/bin/g++-5 || fail

msg "Installation finished for OpenCV"
# Note that we should not add these path, because the folder of python2 may be interrupted.
#msg "Have added $INSTALL_PATH/lib/python3.5/dist-packages/ to your PYTHONPATH"
#msg "Have added $INSTALL_PATH/lib/python2.7/dist-packages/ to your PYTHONPATH"
#echo "export PYTHONPATH=\$PYTHONPATH:$INSTALL_PATH/lib/python3.5/dist-packages:$INSTALL_PATH/lib/python2.7/dist-packages" >> ~/.bashrc 
#export PYTHONPATH=$PYTHONPATH:$INSTALL_PATH/lib/python3.5/dist-packages:$INSTALL_PATH/lib/python2.7/dist-packages
