#!/bin/bash

# Make bashline configurations.
set -e
RESET='\033[0m'
COLOR='\033[1;32m'

function msg {
  echo -e "${COLOR}$(date): $1${RESET}"
}

function fail {
  msg "Error : $?"
  exit 1
}

function mcd {
  mkdir -p "$1" || fail
  cd "$1" || fail
}

# The script for installing newest ffmpeg
apt-get install -y --no-install-recommends build-essential software-properties-common python-software-properties python3-software-properties || fail

apt-get -y update || fail && apt-get -y upgrade || fail && apt-get -y dist-upgrade || fail && apt-get -y autoremove || fail && apt-get -y autoclean || fail

# Switch to gcc-5
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 90 --slave /usr/bin/g++ g++ /usr/bin/g++-5 || fail

# Upgrade python2 & python3 numpy
pip3 install numpy==1.14.5 scipy matplotlib --upgrade || fail

# Reinstall tensorflow
cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1
cd /opt/tensorflow
bash nvbuild.sh --python3.5 || fail # The nvbuild may throw bug if libcuda.so.1 does not exist in the last step. So we create it and let the script be able to remove it without throwing bug during rm

# Switch back to gcc-8
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50 --slave /usr/bin/g++ g++ /usr/bin/g++-5 || fail
