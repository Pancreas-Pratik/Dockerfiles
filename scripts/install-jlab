#!/bin/bash

# Make bashline configurations.
set -e
RESET='\033[0m'
COLOR='\033[1;32m'

function msg {
    echo -e "${COLOR}$(date): $1${RESET}"
}

function fail {
    msg "Error : $?"
    exit 1
}

function mcd {
    mkdir -p "$1" || fail
    cd "$1" || fail
}

function nvm_has {
  type "$1" > /dev/null 2>&1
}

function nvm_default_install_dir {
    [ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm"
}

function nvm_install_dir {
    if [ -n "$NVM_DIR" ]; then
        printf %s "${NVM_DIR}"
    else
        nvm_default_install_dir
    fi
}

function install_nvm {
    msg "Installing NVM, version: $1"
    wget -O- https://raw.githubusercontent.com/nvm-sh/nvm/v$1/install.sh | bash || fail
}

function install_nodejs {
    msg "Installing Node.js, version: $1"
    RUN_NVM_DIR="$(nvm_install_dir)" || fail
    msg "Finding NVM in: ${RUN_NVM_DIR}".
    bash -c ". $RUN_NVM_DIR/nvm.sh \
    && . $RUN_NVM_DIR/bash_completion \
    && nvm install v$1 \
    && nvm alias default v$1 \
    && nvm use default" || fail
}

function run_with_nodejs {
    RUN_NVM_DIR="$(nvm_install_dir)" || fail
    bash -c ". $RUN_NVM_DIR/nvm.sh \
    && . $RUN_NVM_DIR/bash_completion \
    && nvm use default \
    && $1" || fail
}

function py_fix_wrapt_version {
    # Compatibility for conda.
    if [ "x${CUR_PYTHON_VER}" = "xpy37+" ]
    then
        if nvm_has "conda"; then
            conda install -y -c conda-forge wrapt=1.12.1 || fail
        fi
    else
        if nvm_has "conda"; then
            conda install -y --no-deps -c conda-forge wrapt=1.12.1 || fail
            python3 -m pip install wrapt==1.12.1 spacy==2.2.4 || fail
        fi
    fi
}

VERSION=unset
EXTRA_TIERS=1
CUR_PYTHON_VER="py37+"

for ARGUMENT in "$@"
do
    KEY=$(echo $ARGUMENT | cut -f1 -d=)
    VALUE=$(echo $ARGUMENT | cut -f2 -d=)   
    case "$KEY" in
        version)     VERSION=${VALUE} ;;
        ver)         VERSION=${VALUE} ;;
        VERSION)     VERSION=${VALUE} ;;
        ex_tiers)    EXTRA_TIERS=${VALUE} ;;
        py_ver)      CUR_PYTHON_VER=${VALUE} ;;
        *)   
    esac    
done

# Unset the version
if [ "x${VERSION}" = "xunset" ]
then
    python3 -m pip install jupyterlab || fail
fi

# Install version 1
if [ "x${VERSION}" = "x1" ]
then
    msg "Installing Jupyter Lab, ver 1.2.18."
    python3 -m pip install "nbconvert>=5.6.1" tornado==5.1.1 || fail
    python3 -m pip install jupyter jupyter-core notebook pyzmq --upgrade || fail
    python3 -m pip install jupyterlab==1.2.18 || fail
    if ! nvm_has "nvm"; then
        install_nvm 0.37.2 || fail
    fi
    install_nodejs 10.23.1 || fail
fi

# Install version 2
if [ "x${VERSION}" = "x2" ]
then
    msg "Installing Jupyter Lab, ver 2.2.9."
    python3 -m pip install "nbconvert>=5.6.1" tornado==5.1.1 || fail
    python3 -m pip install jupyter jupyter-core notebook pyzmq --upgrade || fail
    python3 -m pip install jupyterlab==2.2.9 || fail
    if ! nvm_has "nvm"; then
        install_nvm 0.37.2 || fail
    fi
    install_nodejs 12.20.1 || fail
fi

# Install version 3
if [ "x${VERSION}" = "x3" ]
then
    if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
    then
        python3 -m pip install nbconvert==6.0.7 || fail
    else
        python3 -m pip install nbconvert==5.6.1 || fail
    fi
    python3 -m pip install tornado==6.1 || fail
    python3 -m pip install jupyter jupyter-core notebook pyzmq --upgrade || fail
    if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
    then
        msg "Installing Jupyter Lab, ver 3.0.5."
        python3 -m pip install typing-extensions==3.7.4.3 jupyterlab==3.0.6 || fail
    else
        msg "For compatibility of python<=3.5, installing Jupyter Lab, ver 3.0.0a14."
        python3 -m pip install jupyterlab==3.0.0a14 || fail
    fi
    if ! nvm_has "nvm"; then
        install_nvm 0.37.2 || fail
    fi
    install_nodejs 15.6.0 || fail
fi

## Install extra packages.

if [ "x${VERSION}" != "xunset" ]
then
    # Check the high-level extensions firstly.
    if [ "x${EXTRA_TIERS}" = "x1" ] || [ "x${EXTRA_TIERS}" = "x2" ]
    then
        msg "Installing Jupyter Lab extensions, high-level, required by all tiers."
        python3 -m pip install ipywidgets || fail

        if [ "x${VERSION}" = "x3" ]
        then
            # For compatible mode.
            if [ "x${CUR_PYTHON_VER}" = "xpy35" ] || [ "x${CUR_PYTHON_VER}" = "xpy34-" ]
            then
                run_with_nodejs "jupyter labextension install @jupyter-widgets/jupyterlab-manager --no-build" || fail
            fi
        fi

        if [ "x${VERSION}" = "x2" ]
        then
            run_with_nodejs "jupyter labextension install @jupyter-widgets/jupyterlab-manager@2.0 --no-build" || fail
        fi

        if [ "x${VERSION}" = "x1" ]
        then
            run_with_nodejs "jupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1 --no-build" || fail
        fi
    fi

    # Install tier 2 packages
    if [ "x${EXTRA_TIERS}" = "x2" ]
    then
        msg "Installing Jupyter Lab extensions, tier 2."
        python3 -m pip install plotly || fail
        run_with_nodejs "jupyter labextension install jupyterlab-plotly --no-build" || fail

        if [ "x${VERSION}" = "x3" ] || [ "x${VERSION}" = "x2" ]
        then
            python3 -m pip install ipydagred3 || fail
        fi

        if [ "x${VERSION}" = "x3" ]
        then
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install jupyterlab-drawio bqplot pyviz_comms || fail
            else
                python3 -m pip install bqplot || fail
                run_with_nodejs "jupyter labextension install bqplot ipydagred3 --no-build" || fail
            fi
        fi

        if [ "x${VERSION}" = "x2" ] || [ "x${VERSION}" = "x1" ]
        then
            python3 -m pip install "tensorboard>=1.14,<=2.2" || fail # If required, downgrad the tensorboard APIs.
            python3 -m pip install jupyter-tensorboard jupyter-dash pyviz_comms || fail
            run_with_nodejs "jupyter labextension install jupyterlab_tensorboard jupyterlab-dash bqplot --no-build" || fail
        fi

        if [ "x${VERSION}" = "x2" ]
        then
            run_with_nodejs "jupyter labextension install @pyviz/jupyterlab_pyviz@1.0.3 ipydagred3 --no-build" || fail
        fi

        if [ "x${VERSION}" = "x1" ]
        then
            run_with_nodejs "jupyter labextension install @mflevine/jupyterlab_html @pyviz/jupyterlab_pyviz@0.8.0 --no-build" || fail
        fi
    fi

    # Install tier 1 packages
    if [ "x${EXTRA_TIERS}" = "x1" ] || [ "x${EXTRA_TIERS}" = "x2" ]
    then
        msg "Installing Jupyter Lab extensions, tier 1."
        python3 -m pip install "nbresuse>=0.3.3,<=0.3.6" || fail
        if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
        then
            python3 -m pip install nbdime==2.1.0 || fail
        else
            python3 -m pip install nbdime==2.0.0 || fail
        fi
        run_with_nodejs "jupyter labextension install nbdime-jupyterlab --no-build" || fail

        if [ "x${VERSION}" = "x3" ] || [ "x${VERSION}" = "x2" ]
        then
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install xeus-python==0.9.1 || fail
            else
                python3 -m pip install xeus-python==0.7.1 || fail
            fi
            python3 -m pip install ptvsd || fail
        fi

        if [ "x${VERSION}" = "x3" ]
        then
            py_fix_wrapt_version || fail # Fix wrapt version problem.
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install jupyterlab-drawio || fail
            fi
            python3 -m pip install bqplot ipylab || fail

            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install python-language-server[all]==0.36.2 aquirdturtle_collapsible_headings==3.0.1 jupyterlab-system-monitor==0.7.0 lckr-jupyterlab-variableinspector==3.0.2 jupyter-lsp==1.1.1 jupyterlab-lsp==3.2.0 "ipympl>=0.6.2" jupytext==1.9.1 sidecar || fail
                run_with_nodejs "jupyter labextension install @jupyterlab/toc @jupyterlab/debugger @jupyterlab/mathjax3-extension @jupyterlab/katex-extension jupyterlab-topbar-extension jupyterlab-system-monitor --no-build" || fail
            else
                python3 -m pip install python-language-server[all]==0.34.0 ipympl==0.5.8 || fail
                run_with_nodejs "jupyter labextension install jupyter-matplotlib@0.7.4 --no-build" || fail
            fi

            # Install jupyterlab-language-packs
            python3 -m pip install https://github.com/cainmagi/Dockerfiles/releases/download/jlab-v1.1/jupyterlab_language_pack_zh_CN-0.0.1.dev0-py2.py3-none-any.whl || fail
        fi

        if [ "x${VERSION}" = "x2" ] || [ "x${VERSION}" = "x1" ]
        then
            py_fix_wrapt_version || fail # Fix wrapt version problem.
            python3 -m pip install bokeh jupyter-bokeh || fail
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install pynvml || fail
                python3 -m pip install jupyterlab-nvdashboard jupyterlab_hdf jupytext==1.8.2 || fail
                run_with_nodejs "jupyter labextension install jupyterlab-nvdashboard @jupyterlab/github @jupyterlab/hdf5 --no-build" || fail
            else
                python3 -m pip install jupytext==1.8.1 || fail
            fi
            run_with_nodejs "jupyter labextension install @jupyterlab/google-drive @jupyterlab/mathjax3-extension @jupyterlab/katex-extension jupyterlab-topbar-extension jupyterlab-system-monitor --no-build" || fail
        fi

        if [ "x${VERSION}" = "x2" ]
        then
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ]; then
                python3 -m pip install python-language-server[all]==0.36.2 || fail
            else
                python3 -m pip install python-language-server[all]==0.34.0 || fail
            fi
            if [ "x${CUR_PYTHON_VER}" = "xpy37+" ] || [ "x${CUR_PYTHON_VER}" = "xpy36" ]
            then
                python3 -m pip install jupyter-lsp==0.9.3 jupyterlab-git || fail
                run_with_nodejs "jupyter labextension install @jupyterlab/git --no-build" || fail
            else
                python3 -m pip install jupyter-lsp==0.9.2 jupyterlab-git==0.21.1 || fail
                run_with_nodejs "jupyter labextension install @jupyterlab/git@0.21.1 --no-build" || fail
            fi
            python3 -m pip install ipympl==0.5.8 sidecar==0.4.0 || fail
            run_with_nodejs "jupyter labextension install jupyter-matplotlib@0.7.4 @krassowski/jupyterlab_go_to_definition jupyterlab-jupytext@1.2.2 @jupyterlab/toc @bokeh/jupyter_bokeh@2.0.4 @krassowski/jupyterlab-lsp@2.1.2 @jupyter-widgets/jupyterlab-sidecar @jupyterlab/debugger --no-build" || fail
        fi

        if [ "x${VERSION}" = "x1" ]
        then
            python3 -m pip install jupyterlab-git==0.11.0 ipympl==0.5.2 sidecar==0.3.0 || fail
            run_with_nodejs "jupyter labextension install jupyter-matplotlib@0.7.1 @krassowski/jupyterlab_go_to_definition@0.7.1 @bokeh/jupyter_bokeh@1.2.0 @jupyter-widgets/jupyterlab-sidecar @jupyterlab/git@0.11.0 jupyterlab-jupytext@1.1.1 --no-build" || fail
        fi
    fi

    if [ "x${EXTRA_TIERS}" = "x3" ] || [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]
    then
        msg "Installing Jupyter Lab extensions, finally building."
        run_with_nodejs "jupyter lab build" || fail
    fi
fi
