#!/bin/bash

# Make bashline configurations.
set -e
RESET='\033[0m'
COLOR_ERR='\033[1;31m'
COLOR='\033[1;32m'

function msg {
    echo -e "${COLOR}$(date): $1${RESET}"
}

function msgerr {
    echo -e "${COLOR_ERR}$(date): $1${RESET}"
}

function fail {
    msgerr "Error : $?"
    exit 1
}

function mcd {
    mkdir -p "$1" || fail
    cd "$1" || fail
}

function nvm_has {
  type "$1" > /dev/null 2>&1
}

function nvm_default_install_dir {
    [ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm"
}

function nvm_install_dir {
    if [ -n "$NVM_DIR" ]; then
        printf %s "${NVM_DIR}"
    else
        nvm_default_install_dir
    fi
}

function install_nvm {
    msg "Installing NVM, version: $1"
    wget -O- https://raw.githubusercontent.com/nvm-sh/nvm/v$1/install.sh | bash || fail
}

function install_nodejs {
    msg "Installing Node.js, version: $1"
    RUN_NVM_DIR="$(nvm_install_dir)" || fail
    msg "Finding NVM in: ${RUN_NVM_DIR}".
    bash -c ". $RUN_NVM_DIR/nvm.sh \
    && . $RUN_NVM_DIR/bash_completion \
    && nvm install v$1 \
    && nvm alias default v$1 \
    && nvm use default" || fail
}

function run_with_nodejs {
    RUN_NVM_DIR="$(nvm_install_dir)" || fail
    bash -c ". $RUN_NVM_DIR/nvm.sh \
    && . $RUN_NVM_DIR/bash_completion \
    && nvm use default \
    && $1" || fail
}

VERSION=unset
EXTRA_TIERS=1
CUR_PYTHON_VER="py37+"

for ARGUMENT in "$@"
do
    KEY=$(echo $ARGUMENT | cut -f1 -d=)
    VALUE=$(echo $ARGUMENT | cut -f2 -d=)
    case "$KEY" in
        version)     VERSION=${VALUE} ;;
        ver)         VERSION=${VALUE} ;;
        VERSION)     VERSION=${VALUE} ;;
        ex_tiers)    EXTRA_TIERS=${VALUE} ;;
        py_ver)      CUR_PYTHON_VER=${VALUE} ;;
        *)
    esac
done

if [[ "x${ADDR_PROXY}" != "xunset" ]]; then
    export http_proxy=${ADDR_PROXY};
    export https_proxy=${ADDR_PROXY};
    export no_proxy="127.0.0.1, localhost";
    msg "Successfully set the proxy to ${ADDR_PROXY}."
fi

# Unset the version
if [ "x${VERSION}" = "xunset" ]
then
    # If unset, fallback to pip.
    python3 -m pip install jupyterlab || fail
fi

# Install version 1
if [ "x${VERSION}" = "x1" ]
then
    conda update -y conda || fail

    # Install Jupyter Lab
    msg "Installing Jupyter Lab, ver 1.2.18."
    conda install -y -c conda-forge "nbconvert>=6.0.7" "jupyter>=1.0" "jupyter_core>=4.7" "notebook>=6.2" "pyzmq>=22.0" "jupyterlab<=1.2.18" || fail
    python3 -m pip install jupyterlab==1.2.18 || fail # Not provided by conda, fallback to pip.

    # Install nodejs
    if ! nvm_has "nvm"; then
        install_nvm 0.38.0 || fail
    fi
    install_nodejs 12.20.1 || fail

    # Install packages required by extensions
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="\"bqplot>=0.11.4\" \"tensorboard>=1.14,<=2.2\""
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        conda install -y -c conda-forge "ipywidgets>=7.5" "nbdime>=2.0" "nbresuse>=0.3.3,<=0.3.6" jupytext=1.8.2 ipympl=0.5.2 bokeh jupyter_bokeh pynvml "jupyterlab-nvdashboard<=0.5.0" jupyterlab-git=0.11.0 ${CONDA_TEMP_PKGS} || fail
        python3 -m pip install jupyterlab_hdf sidecar==0.3.0 || fail
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        conda install -y -c plotly -c defaults -c conda-forge "plotly>=4.14.3" "jupyterlab-dash>=0.1.0a3" || fail
        conda install -y -c pyviz pyviz_comms || fail
        conda install -y -c conda-forge yarn || fail
        python3 -m pip install jupyter-tensorboard || fail
    fi

    # Install all extensions.
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="jupyterlab-plotly@4.14.3 plotlywidget@4.14.3 jupyterlab_tensorboard jupyterlab-dash bqplot @mflevine/jupyterlab_html @pyviz/jupyterlab_pyviz@0.8.0"
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        run_with_nodejs "jupyter labextension install nbdime-jupyterlab jupyterlab-nvdashboard @jupyterlab/github @jupyterlab/hdf5 @jupyterlab/google-drive @jupyterlab/mathjax3-extension @jupyterlab/katex-extension jupyterlab-topbar-extension jupyterlab-system-monitor jupyter-matplotlib@0.7.1 @krassowski/jupyterlab_go_to_definition@0.7.1 @bokeh/jupyter_bokeh@1.2.0 @jupyter-widgets/jupyterlab-sidecar @jupyterlab/git@0.11.0 jupyterlab-jupytext@1.1.1 @jupyter-widgets/jupyterlab-manager ipycanvas ${CONDA_TEMP_PKGS} --no-build" || fail
    fi

    # Build
    if [ "x${EXTRA_TIERS}" = "x3" ] || [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        msg "Installing Jupyter Lab extensions, finally building."
        run_with_nodejs "jupyter lab build" || fail
    fi
fi

# Install version 2
if [ "x${VERSION}" = "x2" ]
then
    conda update -y conda || fail
    
    # Install Jupyter Lab
    msg "Installing Jupyter Lab, ver 2.2.9."
    conda install -y -c conda-forge "nbconvert>=6.0.7" "jupyter>=1.0" "jupyter_core>=4.7" "notebook>=6.2" "pyzmq>=22.0" jupyterlab=2.2.9 || fail

    # Install nodejs
    if ! nvm_has "nvm"; then
        install_nvm 0.38.0 || fail
    fi
    install_nodejs 12.20.1 || fail

    # Install packages required by extensions
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="\"bqplot>=0.11.4\" \"tensorboard>=1.14,<=2.2\""
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        conda install -y -c conda-forge "ipywidgets>=7.5" "nbdime>=2.0" "nbresuse>=0.3.3,<=0.3.6" jupytext=1.8.2 jupyter-lsp-python=0.9.3 ipympl=0.5.8 sidecar=0.4.0 xeus-python ptvsd bokeh jupyter_bokeh pynvml "jupyterlab-nvdashboard<=0.5.0" python-language-server "jupyterlab-git<=0.24.0" ${CONDA_TEMP_PKGS} || fail
        python3 -m pip install jupyterlab_hdf || fail
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        conda install -y -c plotly -c defaults -c conda-forge "plotly>=4.14.3" "jupyterlab-dash>=0.1.0a3" || fail
        conda install -y -c pyviz pyviz_comms || fail
        conda install -y -c conda-forge yarn || fail
        python3 -m pip install jupyter-tensorboard || fail
    fi

    # Install all extensions.
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="jupyterlab-plotly@4.14.3 plotlywidget@4.14.3 jupyterlab_tensorboard jupyterlab-dash bqplot @pyviz/jupyterlab_pyviz@1.0.3"
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        run_with_nodejs "jupyter labextension install nbdime-jupyterlab jupyterlab-nvdashboard @jupyterlab/github @jupyterlab/hdf5 @jupyterlab/google-drive @jupyterlab/mathjax3-extension @jupyterlab/katex-extension jupyterlab-topbar-extension jupyterlab-system-monitor jupyter-matplotlib@0.7.4 @krassowski/jupyterlab_go_to_definition jupyterlab-jupytext@1.2.2 @jupyterlab/toc @bokeh/jupyter_bokeh@2.0.4 @krassowski/jupyterlab-lsp@2.1.2 @jupyter-widgets/jupyterlab-sidecar @jupyterlab/debugger @jupyter-widgets/jupyterlab-manager ipycanvas ipycanvas ${CONDA_TEMP_PKGS} --no-build" || fail
    fi

    # Build
    if [ "x${EXTRA_TIERS}" = "x3" ] || [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        msg "Installing Jupyter Lab extensions, finally building."
        run_with_nodejs "jupyter lab build" || fail
    fi
fi

# Install version 3
if [ "x${VERSION}" = "x3" ]
then
    conda update -y conda || fail
    
    # Install Jupyter Lab
    msg "Installing Jupyter Lab, ver 3.1.0a11."
    conda install -y -c conda-forge -c conda-forge/label/jupyterlab_alpha "nbconvert>=6.0.7" "jupyter>=1.0" "jupyter_core>=4.7" "notebook>=6.2" "pyzmq>=22.0" "typing-extensions>=3.10.0" jupyterlab=3.1.0a11 || fail

    # Install nodejs
    if ! nvm_has "nvm"; then
        install_nvm 0.38.0 || fail
    fi
    install_nodejs 15.12.0 || fail

    # Install packages required by extensions
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="\"bqplot>=0.12.29\""
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        conda install -y -c conda-forge "ipywidgets>=7.6.3" "nbdime>=3.1.0" "nbresuse>=0.4.0" "ipympl>=0.7.0" "sidecar>=0.5.1" "jupytext>=1.11.3" xeus-python ptvsd jupyterlab-lsp python-language-server "ipylab>=0.4.1" "jupyterlab-git>=0.30.1" bokeh "jupyter_bokeh>=3.0.2" ${CONDA_TEMP_PKGS} || fail
        if [ "x${CUR_PYTHON_VER}" = "xpy37+" ]; then
            python3 -m pip install "jupyterlab_nvdashboard>=0.6.0" || fail
        fi
        python3 -m pip install jupyterlab-topbar lckr-jupyterlab-variableinspector aquirdturtle_collapsible_headings jupyterlab-system-monitor || fail
        python3 -m pip install https://github.com/cainmagi/Dockerfiles/releases/download/jlab-v1.1/jupyterlab_language_pack_zh_CN-0.0.1.dev0-py2.py3-none-any.whl || fail
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        conda install -y -c plotly "plotly>=4.14.3" || fail
        conda install -y -c pyviz pyviz_comms || fail
        conda install -y -c conda-forge ipycanvas || fail
        python3 -m pip install jupyterlab-drawio ipydagred3 || fail
        python3 -m pip install git+https://github.com/cliffwoolley/jupyter_tensorboard.git || fail
    fi

    # Install all extensions (if manually installation is required).
    if [ "x${EXTRA_TIERS}" = "x2" ]; then
        CONDA_TEMP_PKGS="jupyterlab-plotly@4.14.3 plotlywidget@4.14.3"
    else
        CONDA_TEMP_PKGS=""
    fi
    if [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        run_with_nodejs "jupyter labextension install nbdime-jupyterlab @jupyterlab/toc @jupyterlab/debugger @jupyterlab/mathjax3-extension @jupyterlab/katex-extension jupyterlab-topbar-text ${CONDA_TEMP_PKGS} --no-build" || fail
    fi

    # Build
    if [ "x${EXTRA_TIERS}" = "x3" ] || [ "x${EXTRA_TIERS}" = "x2" ] || [ "x${EXTRA_TIERS}" = "x1" ]; then
        msg "Installing Jupyter Lab extensions, finally building."
        run_with_nodejs "jupyter lab build" || fail
    fi
fi
